import { N as NoImplementation } from './errors-D124-zqo.js';

/**
 * The base type for all Algorand TypeScript contracts
 */
class BaseContract {
    /**
     * The program to be run when the On Completion Action is == ClearState (3)
     */
    clearStateProgram() {
        return true;
    }
}
/**
 * The contract decorator can be used to specify additional configuration options for a smart contract
 * @param options An object containing the configuration options
 */
function contract(options) {
    return (contract, ctx) => {
        throw new NoImplementation();
    };
}

/**
 * @hidden
 */
const TypeProperty = Symbol('ARC4Type');
/**
 * A base type for ARC4 encoded values
 */
class ARC4Encoded {
    /**
     * Retrieve the encoded bytes for this type
     */
    get bytes() {
        throw new NoImplementation();
    }
}
/**
 * A utf8 encoded string prefixed with its length expressed as a 2 byte uint
 */
class Str extends ARC4Encoded {
    /** @hidden */
    [TypeProperty];
    /**
     * Create a new Str instance
     * @param s The native string to initialize this Str from
     */
    constructor(s) {
        super();
    }
    /**
     * Retrieve the decoded native string
     */
    get native() {
        throw new NoImplementation();
    }
}
/**
 * A fixed bit size unsigned int
 */
class UintN extends ARC4Encoded {
    /** @hidden */
    [TypeProperty];
    /**
     * Create a new UintN instance
     * @param v The native uint64 or biguint value to initialize this UintN from
     */
    constructor(v) {
        super();
    }
    /**
     * Retrieve the decoded native uint64 or biguint
     */
    get native() {
        throw new NoImplementation();
    }
}
/**
 * An alias for UintN<8>
 */
class Byte extends UintN {
}
/**
 * An alias for UintN<8>
 */
class UintN8 extends UintN {
}
/**
 * An alias for UintN<16>
 */
class UintN16 extends UintN {
}
/**
 * An alias for UintN<32>
 */
class UintN32 extends UintN {
}
/**
 * An alias for UintN<64>
 */
class UintN64 extends UintN {
}
/**
 * An alias for UintN<128>
 */
class UintN128 extends UintN {
}
/**
 * An alias for UintN<256>
 */
class UintN256 extends UintN {
}
/**
 * A fixed bit size, fixed decimal unsigned value
 */
class UFixedNxM extends ARC4Encoded {
    /** @hidden */
    [TypeProperty];
    /**
     * Create a new UFixedNxM value
     * @param v A string representing the integer and fractional portion of the number
     */
    constructor(v) {
        super();
    }
    /**
     * Retrieve the decoded native uint64 or biguint where the returned integer represents the fixed decimal value * (10 ^ M)
     */
    get native() {
        throw new NoImplementation();
    }
}
/**
 * A boolean value
 */
class Bool extends ARC4Encoded {
    /** @hidden */
    [TypeProperty];
    /**
     * Create a new Bool value
     * @param v The native boolean to initialize this value from
     */
    constructor(v) {
        super();
    }
    /**
     * Get the decoded native boolean for this value
     */
    get native() {
        throw new NoImplementation();
    }
}
/**
 * A base type for arc4 array types
 */
class Arc4ArrayBase extends ARC4Encoded {
    constructor() {
        super();
    }
    /**
     * Returns the current length of this array
     */
    get length() {
        throw new NoImplementation();
    }
    /**
     * Returns the item at the given index.
     * Negative indexes are taken from the end.
     * @param index The index of the item to retrieve
     */
    at(index) {
        throw new NoImplementation();
    }
    slice(start, end) {
        throw new NoImplementation();
    }
    /**
     * Returns an iterator for the items in this array
     */
    [Symbol.iterator]() {
        throw new NoImplementation();
    }
    /**
     * Returns an iterator for a tuple of the indexes and items in this array
     */
    entries() {
        throw new NoImplementation();
    }
    /**
     * Returns an iterator for the indexes in this array
     */
    keys() {
        throw new NoImplementation();
    }
}
/**
 * A fixed sized array of arc4 items
 * @typeParam TItem The type of a single item in the array
 * @typeParam TLength The fixed length of the array
 */
class StaticArray extends Arc4ArrayBase {
    /** @hidden */
    [TypeProperty];
    constructor(...items) {
        super();
    }
    /**
     * Returns a copy of this array
     */
    copy() {
        throw new NoImplementation();
    }
    /**
     * Returns a new array containing all items from _this_ array, and _other_ array
     * @param other Another array to concat with this one
     */
    concat(other) {
        throw new NoImplementation();
    }
    /**
     * Return the array items as a native tuple
     */
    get native() {
        throw new NoImplementation();
    }
}
/**
 * A dynamic sized array of arc4 items
 * @typeParam TItem The type of a single item in the array
 */
class DynamicArray extends Arc4ArrayBase {
    /** @hidden */
    [TypeProperty];
    /**
     * Create a new DynamicArray with the specified items
     * @param items The initial items for the array
     */
    constructor(...items) {
        super();
    }
    /**
     * Push a number of items into this array
     * @param items The items to be added to this array
     */
    push(...items) {
        throw new NoImplementation();
    }
    /**
     * Pop a single item from this array
     */
    pop() {
        throw new NoImplementation();
    }
    /**
     * Returns a copy of this array
     */
    copy() {
        throw new NoImplementation();
    }
    /**
     * Returns a new array containing all items from _this_ array, and _other_ array
     * @param other Another array to concat with this one
     */
    concat(other) {
        throw new NoImplementation();
    }
    /**
     * Return the array items as a native immutable array
     */
    get native() {
        throw new NoImplementation();
    }
}
/**
 * An arc4 encoded tuple of values
 * @typeParam TTuple A type representing the native tuple of item types
 */
class Tuple extends ARC4Encoded {
    /** @hidden */
    [TypeProperty];
    constructor(...items) {
        super();
    }
    /**
     * Returns the item at the specified index
     * @param index The index of the item to get. Must be a positive literal representing a tuple index
     */
    at(index) {
        throw new NoImplementation();
    }
    /**
     * Returns the length of this tuple
     */
    get length() {
        throw new NoImplementation();
    }
    /**
     * Returns the decoded native tuple (with arc4 encoded items)
     */
    get native() {
        throw new NoImplementation();
    }
}
/**
 * A 32 byte Algorand Address
 */
class Address extends Arc4ArrayBase {
    /** @hidden */
    [TypeProperty];
    /**
     * Create a new Address instance
     * @param value An Account, base 32 address string, or the address bytes
     */
    constructor(value) {
        super();
    }
    /**
     * Returns an Account instance for this Address
     */
    get native() {
        throw new NoImplementation();
    }
}
/**
 * The base type for arc4 structs
 */
class StructBase extends ARC4Encoded {
    /** @hidden */
    [TypeProperty] = 'arc4.Struct';
    get native() {
        throw new NoImplementation();
    }
    /**
     * Returns a deep copy of this struct
     */
    copy() {
        throw new NoImplementation();
    }
}
/**
 * The base type of arc4 structs
 *
 * Usage:
 * ```
 * class MyStruct extends Struct<{ x: UintN8, y: Str, z: DynamicBytes }> {}
 * ```
 */
const Struct = StructBase;
/**
 * A variable length sequence of bytes prefixed with its length expressed as a 2 byte uint
 */
class DynamicBytes extends Arc4ArrayBase {
    /** @hidden */
    [TypeProperty];
    /**
     * Create a new DynamicBytes instance
     * @param value The bytes or utf8 interpreted string to initialize this type
     */
    constructor(value) {
        super();
    }
    /**
     * Get the native bytes value (excludes the length prefix)
     */
    get native() {
        throw new NoImplementation();
    }
    /**
     * Returns a dynamic bytes object containing all bytes from _this_ and _other_
     * @param other Another array of bytes to concat with this one
     */
    concat(other) {
        throw new NoImplementation();
    }
}
/**
 * A fixed length sequence of bytes
 */
class StaticBytes extends Arc4ArrayBase {
    /** @hidden */
    [TypeProperty];
    /**
     * Create a new StaticBytes instance
     * @param value THe bytes or utf8 interpreted string to initialize this type
     */
    constructor(value) {
        super();
    }
    /**
     * Get the native bytes value
     */
    get native() {
        throw new NoImplementation();
    }
    /**
     * Returns a dynamic bytes object containing all bytes from _this_ and _other_
     * @param other Another array of bytes to concat with this one
     */
    concat(other) {
        throw new NoImplementation();
    }
}

/**
 * Pre compile the target ARC4 contract and return a proxy object for constructing inner transactions to call an instance of that contract.
 * @param contract An ARC4 contract class
 * @param options Compile contract arguments
 */
function compileArc4(contract, options) {
    throw new NoImplementation();
}
/**
 * Invokes the target ABI method using a strongly typed fields object.
 * @param method An ABI method function reference.
 * @param fields Specify values for transaction fields.
 */
function abiCall(method, fields) {
    throw new NoImplementation();
}

/**
 * The base type for all ARC4 contracts in Algorand TypeScript
 */
class Contract extends BaseContract {
    /**
     * Default implementation of an ARC4 approval program, routes transactions to ABI or bare methods based on application
     * args and on completion actions
     */
    approvalProgram() {
        throw new NoImplementation();
    }
}
/**
 * Declares the decorated method as an abimethod that is called when the first transaction arg matches the method selector
 * @param config The config for this abi method
 * @typeParam TContract the type of the contract this method is a part of
 */
function abimethod(config) {
    return function (target, ctx) {
        throw new NoImplementation();
    };
}
/**
 * Declares the decorated method as a baremethod that can only be called with no transaction args
 * @param config The config for this bare method
 * @typeParam TContract the type of the contract this method is a part of
 */
function baremethod(config) {
    return function (target, ctx) {
        throw new NoImplementation();
    };
}
function methodSelector(methodSignature) {
    throw new NoImplementation();
}
/**
 * Interpret the provided bytes as an ARC4 encoded type with no validation
 * @param bytes An arc4 encoded bytes value
 * @param prefix The prefix (if any), present in the bytes value. This prefix will be validated and removed
 */
function interpretAsArc4(bytes, prefix = 'none') {
    throw new NoImplementation();
}
/**
 * Decode the provided bytes to a native Algorand TypeScript value
 * @param bytes An arc4 encoded bytes value
 * @param prefix The prefix (if any), present in the bytes value. This prefix will be validated and removed
 */
function decodeArc4(bytes, prefix = 'none') {
    throw new NoImplementation();
}
/**
 * Encode the provided Algorand TypeScript value as ARC4 bytes
 * @param value Any native Algorand TypeScript value with a supported ARC4 encoding
 */
function encodeArc4(value) {
    throw new NoImplementation();
}
/**
 * Return the total number of bytes required to store T as ARC4 bytes.
 *
 * T must represent a type with a fixed length encoding scheme.
 * @typeParam T Any native or arc4 type with a fixed encoding size.
 */
function arc4EncodedLength() {
    throw new NoImplementation();
}

var index = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ARC4Encoded: ARC4Encoded,
    Address: Address,
    Bool: Bool,
    Byte: Byte,
    Contract: Contract,
    DynamicArray: DynamicArray,
    DynamicBytes: DynamicBytes,
    StaticArray: StaticArray,
    StaticBytes: StaticBytes,
    Str: Str,
    Struct: Struct,
    Tuple: Tuple,
    UFixedNxM: UFixedNxM,
    UintN: UintN,
    UintN128: UintN128,
    UintN16: UintN16,
    UintN256: UintN256,
    UintN32: UintN32,
    UintN64: UintN64,
    UintN8: UintN8,
    abiCall: abiCall,
    abimethod: abimethod,
    arc4EncodedLength: arc4EncodedLength,
    baremethod: baremethod,
    compileArc4: compileArc4,
    decodeArc4: decodeArc4,
    encodeArc4: encodeArc4,
    interpretAsArc4: interpretAsArc4,
    methodSelector: methodSelector
});

export { ARC4Encoded as A, BaseContract as B, Contract as C, DynamicArray as D, Str as S, Tuple as T, UintN as U, abimethod as a, baremethod as b, contract as c, interpretAsArc4 as d, decodeArc4 as e, encodeArc4 as f, arc4EncodedLength as g, Byte as h, index as i, UintN8 as j, UintN16 as k, UintN32 as l, methodSelector as m, UintN64 as n, UintN128 as o, UintN256 as p, UFixedNxM as q, Bool as r, StaticArray as s, Address as t, Struct as u, DynamicBytes as v, StaticBytes as w, compileArc4 as x, abiCall as y };
//# sourceMappingURL=index-dzo0agbK.js.map
