import { uint64, Uint64Compat } from './primitives';
/**
 * An in memory mutable array which is passed by reference
 */
export declare class MutableArray<TItem> {
    /**
     * Create a new MutableArray with the specified items
     * @param items The initial items for the array
     */
    constructor(...items: TItem[]);
    /**
     * Returns the current length of this array
     */
    get length(): uint64;
    /**
     * Returns the item at the given index.
     * Negative indexes are taken from the end.
     * @param index The index of the item to retrieve
     */
    at(index: Uint64Compat): TItem;
    /**
     * Returns an iterator for the items in this array
     */
    [Symbol.iterator](): IterableIterator<TItem>;
    /**
     * Returns an iterator for a tuple of the indexes and items in this array
     */
    entries(): IterableIterator<readonly [uint64, TItem]>;
    /**
     * Returns an iterator for the indexes in this array
     */
    keys(): IterableIterator<uint64>;
    /**
     * Get or set the item at the specified index.
     * Negative indexes are not supported
     */
    [index: uint64]: TItem;
    /**
     * Push a number of items into this array
     * @param items The items to be added to this array
     */
    push(...items: TItem[]): void;
    /**
     * Pop a single item from this array
     */
    pop(): TItem;
    /**
     * Create a copy of this array
     */
    copy(): MutableArray<TItem>;
}
