{"version":3,"file":"gtxn-CXBH4yay.js","sources":["../src/gtxn.ts"],"sourcesContent":["/* THIS FILE IS GENERATED BY ~/scripts/generate-txn-types.ts - DO NOT MODIFY DIRECTLY */\nimport { OnCompleteAction } from './on-complete-action'\nimport { bytes, uint64 } from './primitives'\nimport { Account, Application, Asset } from './reference'\nimport { TransactionType } from './transactions'\nimport { NoImplementation } from './internal/errors'\nconst isGtxn = Symbol('isGtxn')\n/**\n * A group transaction of type 'pay'\n */\nexport interface PaymentTxn {\n  /** @hidden */\n  [isGtxn]?: true\n  /**\n   * 32 byte address\n   */\n  readonly sender: Account\n  /**\n   * microalgos\n   */\n  readonly fee: uint64\n  /**\n   * round number\n   */\n  readonly firstValid: uint64\n  /**\n   * UNIX timestamp of block before txn.FirstValid. Fails if negative\n   */\n  readonly firstValidTime: uint64\n  /**\n   * round number\n   */\n  readonly lastValid: uint64\n  /**\n   * Any data up to 1024 bytes\n   */\n  readonly note: bytes\n  /**\n   * 32 byte lease value\n   */\n  readonly lease: bytes\n  /**\n   * Transaction type as bytes\n   */\n  readonly typeBytes: bytes\n  /**\n   * Transaction type\n   */\n  readonly type: TransactionType.Payment\n  /**\n   * Position of this transaction within an atomic group\n   * A stand-alone transaction is implicitly element 0 in a group of 1\n   */\n  readonly groupIndex: uint64\n  /**\n   * The computed ID for this transaction. 32 bytes.\n   */\n  readonly txnId: bytes\n  /**\n   * 32 byte Sender's new AuthAddr\n   */\n  readonly rekeyTo: Account\n  /**\n   * 32 byte address\n   */\n  readonly receiver: Account\n  /**\n   * microalgos\n   */\n  readonly amount: uint64\n  /**\n   * 32 byte address\n   */\n  readonly closeRemainderTo: Account\n}\n/**\n * A group transaction of type 'keyreg'\n */\nexport interface KeyRegistrationTxn {\n  /** @hidden */\n  [isGtxn]?: true\n  /**\n   * 32 byte address\n   */\n  readonly sender: Account\n  /**\n   * microalgos\n   */\n  readonly fee: uint64\n  /**\n   * round number\n   */\n  readonly firstValid: uint64\n  /**\n   * UNIX timestamp of block before txn.FirstValid. Fails if negative\n   */\n  readonly firstValidTime: uint64\n  /**\n   * round number\n   */\n  readonly lastValid: uint64\n  /**\n   * Any data up to 1024 bytes\n   */\n  readonly note: bytes\n  /**\n   * 32 byte lease value\n   */\n  readonly lease: bytes\n  /**\n   * Transaction type as bytes\n   */\n  readonly typeBytes: bytes\n  /**\n   * Transaction type\n   */\n  readonly type: TransactionType.KeyRegistration\n  /**\n   * Position of this transaction within an atomic group\n   * A stand-alone transaction is implicitly element 0 in a group of 1\n   */\n  readonly groupIndex: uint64\n  /**\n   * The computed ID for this transaction. 32 bytes.\n   */\n  readonly txnId: bytes\n  /**\n   * 32 byte Sender's new AuthAddr\n   */\n  readonly rekeyTo: Account\n  /**\n   * 32 byte address\n   */\n  readonly voteKey: bytes\n  /**\n   * 32 byte address\n   */\n  readonly selectionKey: bytes\n  /**\n   * The first round that the participation key is valid.\n   */\n  readonly voteFirst: uint64\n  /**\n   * The last round that the participation key is valid.\n   */\n  readonly voteLast: uint64\n  /**\n   * Dilution for the 2-level participation key\n   */\n  readonly voteKeyDilution: uint64\n  /**\n   * Marks an account nonparticipating for rewards\n   */\n  readonly nonparticipation: boolean\n  /**\n   * 64 byte state proof public key\n   */\n  readonly stateProofKey: bytes\n}\n/**\n * A group transaction of type 'acfg'\n */\nexport interface AssetConfigTxn {\n  /** @hidden */\n  [isGtxn]?: true\n  /**\n   * 32 byte address\n   */\n  readonly sender: Account\n  /**\n   * microalgos\n   */\n  readonly fee: uint64\n  /**\n   * round number\n   */\n  readonly firstValid: uint64\n  /**\n   * UNIX timestamp of block before txn.FirstValid. Fails if negative\n   */\n  readonly firstValidTime: uint64\n  /**\n   * round number\n   */\n  readonly lastValid: uint64\n  /**\n   * Any data up to 1024 bytes\n   */\n  readonly note: bytes\n  /**\n   * 32 byte lease value\n   */\n  readonly lease: bytes\n  /**\n   * Transaction type as bytes\n   */\n  readonly typeBytes: bytes\n  /**\n   * Transaction type\n   */\n  readonly type: TransactionType.AssetConfig\n  /**\n   * Position of this transaction within an atomic group\n   * A stand-alone transaction is implicitly element 0 in a group of 1\n   */\n  readonly groupIndex: uint64\n  /**\n   * The computed ID for this transaction. 32 bytes.\n   */\n  readonly txnId: bytes\n  /**\n   * 32 byte Sender's new AuthAddr\n   */\n  readonly rekeyTo: Account\n  /**\n   * Asset ID in asset config transaction\n   */\n  readonly configAsset: Asset\n  /**\n   * The asset created by this transaction\n   */\n  readonly createdAsset: Asset\n  /**\n   * Total number of units of this asset created\n   */\n  readonly total: uint64\n  /**\n   * Number of digits to display after the decimal place when displaying the asset\n   */\n  readonly decimals: uint64\n  /**\n   * Whether the asset's slots are frozen by default or not, 0 or 1\n   */\n  readonly defaultFrozen: boolean\n  /**\n   * Unit name of the asset\n   */\n  readonly unitName: bytes\n  /**\n   * The asset name\n   */\n  readonly assetName: bytes\n  /**\n   * URL\n   */\n  readonly url: bytes\n  /**\n   * 32 byte commitment to unspecified asset metadata\n   */\n  readonly metadataHash: bytes\n  /**\n   * 32 byte address\n   */\n  readonly manager: Account\n  /**\n   * 32 byte address\n   */\n  readonly reserve: Account\n  /**\n   * 32 byte address\n   */\n  readonly freeze: Account\n  /**\n   * 32 byte address\n   */\n  readonly clawback: Account\n}\n/**\n * A group transaction of type 'axfer'\n */\nexport interface AssetTransferTxn {\n  /** @hidden */\n  [isGtxn]?: true\n  /**\n   * 32 byte address\n   */\n  readonly sender: Account\n  /**\n   * microalgos\n   */\n  readonly fee: uint64\n  /**\n   * round number\n   */\n  readonly firstValid: uint64\n  /**\n   * UNIX timestamp of block before txn.FirstValid. Fails if negative\n   */\n  readonly firstValidTime: uint64\n  /**\n   * round number\n   */\n  readonly lastValid: uint64\n  /**\n   * Any data up to 1024 bytes\n   */\n  readonly note: bytes\n  /**\n   * 32 byte lease value\n   */\n  readonly lease: bytes\n  /**\n   * Transaction type as bytes\n   */\n  readonly typeBytes: bytes\n  /**\n   * Transaction type\n   */\n  readonly type: TransactionType.AssetTransfer\n  /**\n   * Position of this transaction within an atomic group\n   * A stand-alone transaction is implicitly element 0 in a group of 1\n   */\n  readonly groupIndex: uint64\n  /**\n   * The computed ID for this transaction. 32 bytes.\n   */\n  readonly txnId: bytes\n  /**\n   * 32 byte Sender's new AuthAddr\n   */\n  readonly rekeyTo: Account\n  /**\n   * Asset ID\n   */\n  readonly xferAsset: Asset\n  /**\n   * value in Asset's units\n   */\n  readonly assetAmount: uint64\n  /**\n   * 32 byte address. Source of assets if Sender is the Asset's Clawback address.\n   */\n  readonly assetSender: Account\n  /**\n   * 32 byte address\n   */\n  readonly assetReceiver: Account\n  /**\n   * 32 byte address\n   */\n  readonly assetCloseTo: Account\n}\n/**\n * A group transaction of type 'afrz'\n */\nexport interface AssetFreezeTxn {\n  /** @hidden */\n  [isGtxn]?: true\n  /**\n   * 32 byte address\n   */\n  readonly sender: Account\n  /**\n   * microalgos\n   */\n  readonly fee: uint64\n  /**\n   * round number\n   */\n  readonly firstValid: uint64\n  /**\n   * UNIX timestamp of block before txn.FirstValid. Fails if negative\n   */\n  readonly firstValidTime: uint64\n  /**\n   * round number\n   */\n  readonly lastValid: uint64\n  /**\n   * Any data up to 1024 bytes\n   */\n  readonly note: bytes\n  /**\n   * 32 byte lease value\n   */\n  readonly lease: bytes\n  /**\n   * Transaction type as bytes\n   */\n  readonly typeBytes: bytes\n  /**\n   * Transaction type\n   */\n  readonly type: TransactionType.AssetFreeze\n  /**\n   * Position of this transaction within an atomic group\n   * A stand-alone transaction is implicitly element 0 in a group of 1\n   */\n  readonly groupIndex: uint64\n  /**\n   * The computed ID for this transaction. 32 bytes.\n   */\n  readonly txnId: bytes\n  /**\n   * 32 byte Sender's new AuthAddr\n   */\n  readonly rekeyTo: Account\n  /**\n   * Asset ID being frozen or un-frozen\n   */\n  readonly freezeAsset: Asset\n  /**\n   * 32 byte address of the account whose asset slot is being frozen or un-frozen\n   */\n  readonly freezeAccount: Account\n  /**\n   * The new frozen value\n   */\n  readonly frozen: boolean\n}\n/**\n * A group transaction of type 'appl'\n */\nexport interface ApplicationCallTxn {\n  /** @hidden */\n  [isGtxn]?: true\n  /**\n   * 32 byte address\n   */\n  readonly sender: Account\n  /**\n   * microalgos\n   */\n  readonly fee: uint64\n  /**\n   * round number\n   */\n  readonly firstValid: uint64\n  /**\n   * UNIX timestamp of block before txn.FirstValid. Fails if negative\n   */\n  readonly firstValidTime: uint64\n  /**\n   * round number\n   */\n  readonly lastValid: uint64\n  /**\n   * Any data up to 1024 bytes\n   */\n  readonly note: bytes\n  /**\n   * 32 byte lease value\n   */\n  readonly lease: bytes\n  /**\n   * Transaction type as bytes\n   */\n  readonly typeBytes: bytes\n  /**\n   * Transaction type\n   */\n  readonly type: TransactionType.ApplicationCall\n  /**\n   * Position of this transaction within an atomic group\n   * A stand-alone transaction is implicitly element 0 in a group of 1\n   */\n  readonly groupIndex: uint64\n  /**\n   * The computed ID for this transaction. 32 bytes.\n   */\n  readonly txnId: bytes\n  /**\n   * 32 byte Sender's new AuthAddr\n   */\n  readonly rekeyTo: Account\n  /**\n   * ApplicationID from ApplicationCall transaction\n   */\n  readonly appId: Application\n  /**\n   * ApplicationCall transaction on completion action\n   */\n  readonly onCompletion: OnCompleteAction\n  /**\n   * Number of ApplicationArgs\n   */\n  readonly numAppArgs: uint64\n  /**\n   * Number of ApplicationArgs\n   */\n  readonly numAccounts: uint64\n  /**\n   * The first page of the Approval program\n   */\n  readonly approvalProgram: bytes\n  /**\n   * The first page of the Clear State program\n   */\n  readonly clearStateProgram: bytes\n  /**\n   * Number of Assets\n   */\n  readonly numAssets: uint64\n  /**\n   * Number of Applications\n   */\n  readonly numApps: uint64\n  /**\n   * Number of global state integers this application makes use of.\n   */\n  readonly globalNumUint: uint64\n  /**\n   * Number of global state byteslices this application makes use of.\n   */\n  readonly globalNumBytes: uint64\n  /**\n   * Number of local state integers this application makes use of.\n   */\n  readonly localNumUint: uint64\n  /**\n   * Number of local state byteslices this application makes use of.\n   */\n  readonly localNumBytes: uint64\n  /**\n   * Number of additional pages for each of the application's approval and clear state program\n   */\n  readonly extraProgramPages: uint64\n  /**\n   * The last message emitted. Empty bytes if none were emitted. App mode only\n   */\n  readonly lastLog: bytes\n  /**\n   * Read application logs\n   * @param index Index of the log to get\n   */\n  logs(index: uint64): bytes\n  /**\n   * Number of Approval Program pages\n   */\n  readonly numApprovalProgramPages: uint64\n  /**\n   * All approval program pages\n   * @param index Index of the page to get\n   */\n  approvalProgramPages(index: uint64): bytes\n  /**\n   * Number of Clear State Program pages\n   */\n  readonly numClearStateProgramPages: uint64\n  /**\n   * All clear state program pages\n   * @param index Index of the page to get\n   */\n  clearStateProgramPages(index: uint64): bytes\n  /**\n   * Arguments passed to the application in the ApplicationCall transaction\n   * @param index Index of the arg to get\n   */\n  appArgs(index: uint64): bytes\n  /**\n   * Accounts listed in the ApplicationCall transaction\n   * @param index Index of the account to get\n   */\n  accounts(index: uint64): Account\n  /**\n   * Foreign Assets listed in the ApplicationCall transaction\n   * @param index Index of the asset to get\n   */\n  assets(index: uint64): Asset\n  /**\n   * Foreign Apps listed in the ApplicationCall transaction\n   * @param index Index of the application to get\n   */\n  apps(index: uint64): Application\n  /**\n   * The id of the created application\n   */\n  readonly createdApp: Application\n  /**\n   * Number of logs\n   */\n  readonly numLogs: uint64\n}\n/**\n * A group transaction of any type\n */\nexport type Transaction = PaymentTxn | KeyRegistrationTxn | AssetConfigTxn | AssetTransferTxn | AssetFreezeTxn | ApplicationCallTxn\n/**\n * Get the nth transaction in the group without verifying its type\n * @param n The index of the txn in the group\n */\nexport function Transaction(n: uint64): Transaction {\n  throw new NoImplementation()\n}\n/**\n * Get the nth transaction in the group\n * Verifies the txn type is 'pay'\n * @param n The index of the txn in the group\n */\nexport function PaymentTxn(n: uint64): PaymentTxn {\n  throw new NoImplementation()\n}\n/**\n * Get the nth transaction in the group\n * Verifies the txn type is 'keyreg'\n * @param n The index of the txn in the group\n */\nexport function KeyRegistrationTxn(n: uint64): KeyRegistrationTxn {\n  throw new NoImplementation()\n}\n/**\n * Get the nth transaction in the group\n * Verifies the txn type is 'acfg'\n * @param n The index of the txn in the group\n */\nexport function AssetConfigTxn(n: uint64): AssetConfigTxn {\n  throw new NoImplementation()\n}\n/**\n * Get the nth transaction in the group\n * Verifies the txn type is 'axfer'\n * @param n The index of the txn in the group\n */\nexport function AssetTransferTxn(n: uint64): AssetTransferTxn {\n  throw new NoImplementation()\n}\n/**\n * Get the nth transaction in the group\n * Verifies the txn type is 'afrz'\n * @param n The index of the txn in the group\n */\nexport function AssetFreezeTxn(n: uint64): AssetFreezeTxn {\n  throw new NoImplementation()\n}\n/**\n * Get the nth transaction in the group\n * Verifies the txn type is 'appl'\n * @param n The index of the txn in the group\n */\nexport function ApplicationCallTxn(n: uint64): ApplicationCallTxn {\n  throw new NoImplementation()\n}\n"],"names":[],"mappings":";;AAkkBA;;;AAGG;AACG,SAAU,WAAW,CAAC,CAAS,EAAA;IACnC,MAAM,IAAI,gBAAgB,EAAE;AAC9B;AACA;;;;AAIG;AACG,SAAU,UAAU,CAAC,CAAS,EAAA;IAClC,MAAM,IAAI,gBAAgB,EAAE;AAC9B;AACA;;;;AAIG;AACG,SAAU,kBAAkB,CAAC,CAAS,EAAA;IAC1C,MAAM,IAAI,gBAAgB,EAAE;AAC9B;AACA;;;;AAIG;AACG,SAAU,cAAc,CAAC,CAAS,EAAA;IACtC,MAAM,IAAI,gBAAgB,EAAE;AAC9B;AACA;;;;AAIG;AACG,SAAU,gBAAgB,CAAC,CAAS,EAAA;IACxC,MAAM,IAAI,gBAAgB,EAAE;AAC9B;AACA;;;;AAIG;AACG,SAAU,cAAc,CAAC,CAAS,EAAA;IACtC,MAAM,IAAI,gBAAgB,EAAE;AAC9B;AACA;;;;AAIG;AACG,SAAU,kBAAkB,CAAC,CAAS,EAAA;IAC1C,MAAM,IAAI,gBAAgB,EAAE;AAC9B;;;;;;;;;;;;;;;"}