{"version":3,"file":"itxn-CPeSA_Q_.js","sources":["../src/itxn.ts"],"sourcesContent":["/* THIS FILE IS GENERATED BY ~/scripts/generate-txn-types.ts - DO NOT MODIFY DIRECTLY */\nimport { OnCompleteAction } from './on-complete-action'\nimport { bytes, uint64 } from './primitives'\nimport { Account, Application, Asset } from './reference'\nimport { TransactionType } from './transactions'\nimport { NoImplementation } from './internal/errors'\nconst isItxn = Symbol('isItxn')\n\n/**\n * An inner transaction of type 'pay'\n */\nexport interface PaymentInnerTxn {\n  /** @hidden */\n  [isItxn]?: true\n  /**\n   * 32 byte address\n   */\n  readonly sender: Account\n  /**\n   * microalgos\n   */\n  readonly fee: uint64\n  /**\n   * round number\n   */\n  readonly firstValid: uint64\n  /**\n   * UNIX timestamp of block before txn.FirstValid. Fails if negative\n   */\n  readonly firstValidTime: uint64\n  /**\n   * round number\n   */\n  readonly lastValid: uint64\n  /**\n   * Any data up to 1024 bytes\n   */\n  readonly note: bytes\n  /**\n   * 32 byte lease value\n   */\n  readonly lease: bytes\n  /**\n   * Transaction type as bytes\n   */\n  readonly typeBytes: bytes\n  /**\n   * Transaction type\n   */\n  readonly type: TransactionType.Payment\n  /**\n   * Position of this transaction within an atomic group\n   * A stand-alone transaction is implicitly element 0 in a group of 1\n   */\n  readonly groupIndex: uint64\n  /**\n   * The computed ID for this transaction. 32 bytes.\n   */\n  readonly txnId: bytes\n  /**\n   * 32 byte Sender's new AuthAddr\n   */\n  readonly rekeyTo: Account\n  /**\n   * 32 byte address\n   */\n  readonly receiver: Account\n  /**\n   * microalgos\n   */\n  readonly amount: uint64\n  /**\n   * 32 byte address\n   */\n  readonly closeRemainderTo: Account\n}\n/**\n * An inner transaction of type 'keyreg'\n */\nexport interface KeyRegistrationInnerTxn {\n  /** @hidden */\n  [isItxn]?: true\n  /**\n   * 32 byte address\n   */\n  readonly sender: Account\n  /**\n   * microalgos\n   */\n  readonly fee: uint64\n  /**\n   * round number\n   */\n  readonly firstValid: uint64\n  /**\n   * UNIX timestamp of block before txn.FirstValid. Fails if negative\n   */\n  readonly firstValidTime: uint64\n  /**\n   * round number\n   */\n  readonly lastValid: uint64\n  /**\n   * Any data up to 1024 bytes\n   */\n  readonly note: bytes\n  /**\n   * 32 byte lease value\n   */\n  readonly lease: bytes\n  /**\n   * Transaction type as bytes\n   */\n  readonly typeBytes: bytes\n  /**\n   * Transaction type\n   */\n  readonly type: TransactionType.KeyRegistration\n  /**\n   * Position of this transaction within an atomic group\n   * A stand-alone transaction is implicitly element 0 in a group of 1\n   */\n  readonly groupIndex: uint64\n  /**\n   * The computed ID for this transaction. 32 bytes.\n   */\n  readonly txnId: bytes\n  /**\n   * 32 byte Sender's new AuthAddr\n   */\n  readonly rekeyTo: Account\n  /**\n   * 32 byte address\n   */\n  readonly voteKey: bytes\n  /**\n   * 32 byte address\n   */\n  readonly selectionKey: bytes\n  /**\n   * The first round that the participation key is valid.\n   */\n  readonly voteFirst: uint64\n  /**\n   * The last round that the participation key is valid.\n   */\n  readonly voteLast: uint64\n  /**\n   * Dilution for the 2-level participation key\n   */\n  readonly voteKeyDilution: uint64\n  /**\n   * Marks an account nonparticipating for rewards\n   */\n  readonly nonparticipation: boolean\n  /**\n   * 64 byte state proof public key\n   */\n  readonly stateProofKey: bytes\n}\n/**\n * An inner transaction of type 'acfg'\n */\nexport interface AssetConfigInnerTxn {\n  /** @hidden */\n  [isItxn]?: true\n  /**\n   * 32 byte address\n   */\n  readonly sender: Account\n  /**\n   * microalgos\n   */\n  readonly fee: uint64\n  /**\n   * round number\n   */\n  readonly firstValid: uint64\n  /**\n   * UNIX timestamp of block before txn.FirstValid. Fails if negative\n   */\n  readonly firstValidTime: uint64\n  /**\n   * round number\n   */\n  readonly lastValid: uint64\n  /**\n   * Any data up to 1024 bytes\n   */\n  readonly note: bytes\n  /**\n   * 32 byte lease value\n   */\n  readonly lease: bytes\n  /**\n   * Transaction type as bytes\n   */\n  readonly typeBytes: bytes\n  /**\n   * Transaction type\n   */\n  readonly type: TransactionType.AssetConfig\n  /**\n   * Position of this transaction within an atomic group\n   * A stand-alone transaction is implicitly element 0 in a group of 1\n   */\n  readonly groupIndex: uint64\n  /**\n   * The computed ID for this transaction. 32 bytes.\n   */\n  readonly txnId: bytes\n  /**\n   * 32 byte Sender's new AuthAddr\n   */\n  readonly rekeyTo: Account\n  /**\n   * Asset ID in asset config transaction\n   */\n  readonly configAsset: Asset\n  /**\n   * The asset created by this transaction\n   */\n  readonly createdAsset: Asset\n  /**\n   * Total number of units of this asset created\n   */\n  readonly total: uint64\n  /**\n   * Number of digits to display after the decimal place when displaying the asset\n   */\n  readonly decimals: uint64\n  /**\n   * Whether the asset's slots are frozen by default or not, 0 or 1\n   */\n  readonly defaultFrozen: boolean\n  /**\n   * Unit name of the asset\n   */\n  readonly unitName: bytes\n  /**\n   * The asset name\n   */\n  readonly assetName: bytes\n  /**\n   * URL\n   */\n  readonly url: bytes\n  /**\n   * 32 byte commitment to unspecified asset metadata\n   */\n  readonly metadataHash: bytes\n  /**\n   * 32 byte address\n   */\n  readonly manager: Account\n  /**\n   * 32 byte address\n   */\n  readonly reserve: Account\n  /**\n   * 32 byte address\n   */\n  readonly freeze: Account\n  /**\n   * 32 byte address\n   */\n  readonly clawback: Account\n}\n/**\n * An inner transaction of type 'axfer'\n */\nexport interface AssetTransferInnerTxn {\n  /** @hidden */\n  [isItxn]?: true\n  /**\n   * 32 byte address\n   */\n  readonly sender: Account\n  /**\n   * microalgos\n   */\n  readonly fee: uint64\n  /**\n   * round number\n   */\n  readonly firstValid: uint64\n  /**\n   * UNIX timestamp of block before txn.FirstValid. Fails if negative\n   */\n  readonly firstValidTime: uint64\n  /**\n   * round number\n   */\n  readonly lastValid: uint64\n  /**\n   * Any data up to 1024 bytes\n   */\n  readonly note: bytes\n  /**\n   * 32 byte lease value\n   */\n  readonly lease: bytes\n  /**\n   * Transaction type as bytes\n   */\n  readonly typeBytes: bytes\n  /**\n   * Transaction type\n   */\n  readonly type: TransactionType.AssetTransfer\n  /**\n   * Position of this transaction within an atomic group\n   * A stand-alone transaction is implicitly element 0 in a group of 1\n   */\n  readonly groupIndex: uint64\n  /**\n   * The computed ID for this transaction. 32 bytes.\n   */\n  readonly txnId: bytes\n  /**\n   * 32 byte Sender's new AuthAddr\n   */\n  readonly rekeyTo: Account\n  /**\n   * Asset ID\n   */\n  readonly xferAsset: Asset\n  /**\n   * value in Asset's units\n   */\n  readonly assetAmount: uint64\n  /**\n   * 32 byte address. Source of assets if Sender is the Asset's Clawback address.\n   */\n  readonly assetSender: Account\n  /**\n   * 32 byte address\n   */\n  readonly assetReceiver: Account\n  /**\n   * 32 byte address\n   */\n  readonly assetCloseTo: Account\n}\n/**\n * An inner transaction of type 'afrz'\n */\nexport interface AssetFreezeInnerTxn {\n  /** @hidden */\n  [isItxn]?: true\n  /**\n   * 32 byte address\n   */\n  readonly sender: Account\n  /**\n   * microalgos\n   */\n  readonly fee: uint64\n  /**\n   * round number\n   */\n  readonly firstValid: uint64\n  /**\n   * UNIX timestamp of block before txn.FirstValid. Fails if negative\n   */\n  readonly firstValidTime: uint64\n  /**\n   * round number\n   */\n  readonly lastValid: uint64\n  /**\n   * Any data up to 1024 bytes\n   */\n  readonly note: bytes\n  /**\n   * 32 byte lease value\n   */\n  readonly lease: bytes\n  /**\n   * Transaction type as bytes\n   */\n  readonly typeBytes: bytes\n  /**\n   * Transaction type\n   */\n  readonly type: TransactionType.AssetFreeze\n  /**\n   * Position of this transaction within an atomic group\n   * A stand-alone transaction is implicitly element 0 in a group of 1\n   */\n  readonly groupIndex: uint64\n  /**\n   * The computed ID for this transaction. 32 bytes.\n   */\n  readonly txnId: bytes\n  /**\n   * 32 byte Sender's new AuthAddr\n   */\n  readonly rekeyTo: Account\n  /**\n   * Asset ID being frozen or un-frozen\n   */\n  readonly freezeAsset: Asset\n  /**\n   * 32 byte address of the account whose asset slot is being frozen or un-frozen\n   */\n  readonly freezeAccount: Account\n  /**\n   * The new frozen value\n   */\n  readonly frozen: boolean\n}\n/**\n * An inner transaction of type 'appl'\n */\nexport interface ApplicationCallInnerTxn {\n  /** @hidden */\n  [isItxn]?: true\n  /**\n   * 32 byte address\n   */\n  readonly sender: Account\n  /**\n   * microalgos\n   */\n  readonly fee: uint64\n  /**\n   * round number\n   */\n  readonly firstValid: uint64\n  /**\n   * UNIX timestamp of block before txn.FirstValid. Fails if negative\n   */\n  readonly firstValidTime: uint64\n  /**\n   * round number\n   */\n  readonly lastValid: uint64\n  /**\n   * Any data up to 1024 bytes\n   */\n  readonly note: bytes\n  /**\n   * 32 byte lease value\n   */\n  readonly lease: bytes\n  /**\n   * Transaction type as bytes\n   */\n  readonly typeBytes: bytes\n  /**\n   * Transaction type\n   */\n  readonly type: TransactionType.ApplicationCall\n  /**\n   * Position of this transaction within an atomic group\n   * A stand-alone transaction is implicitly element 0 in a group of 1\n   */\n  readonly groupIndex: uint64\n  /**\n   * The computed ID for this transaction. 32 bytes.\n   */\n  readonly txnId: bytes\n  /**\n   * 32 byte Sender's new AuthAddr\n   */\n  readonly rekeyTo: Account\n  /**\n   * ApplicationID from ApplicationCall transaction\n   */\n  readonly appId: Application\n  /**\n   * ApplicationCall transaction on completion action\n   */\n  readonly onCompletion: OnCompleteAction\n  /**\n   * Number of ApplicationArgs\n   */\n  readonly numAppArgs: uint64\n  /**\n   * Number of ApplicationArgs\n   */\n  readonly numAccounts: uint64\n  /**\n   * The first page of the Approval program\n   */\n  readonly approvalProgram: bytes\n  /**\n   * The first page of the Clear State program\n   */\n  readonly clearStateProgram: bytes\n  /**\n   * Number of Assets\n   */\n  readonly numAssets: uint64\n  /**\n   * Number of Applications\n   */\n  readonly numApps: uint64\n  /**\n   * Number of global state integers this application makes use of.\n   */\n  readonly globalNumUint: uint64\n  /**\n   * Number of global state byteslices this application makes use of.\n   */\n  readonly globalNumBytes: uint64\n  /**\n   * Number of local state integers this application makes use of.\n   */\n  readonly localNumUint: uint64\n  /**\n   * Number of local state byteslices this application makes use of.\n   */\n  readonly localNumBytes: uint64\n  /**\n   * Number of additional pages for each of the application's approval and clear state program\n   */\n  readonly extraProgramPages: uint64\n  /**\n   * The last message emitted. Empty bytes if none were emitted. App mode only\n   */\n  readonly lastLog: bytes\n  /**\n   * Read application logs\n   * @param index Index of the log to get\n   */\n  logs(index: uint64): bytes\n  /**\n   * Number of Approval Program pages\n   */\n  readonly numApprovalProgramPages: uint64\n  /**\n   * All approval program pages\n   * @param index Index of the page to get\n   */\n  approvalProgramPages(index: uint64): bytes\n  /**\n   * Number of Clear State Program pages\n   */\n  readonly numClearStateProgramPages: uint64\n  /**\n   * All clear state program pages\n   * @param index Index of the page to get\n   */\n  clearStateProgramPages(index: uint64): bytes\n  /**\n   * Arguments passed to the application in the ApplicationCall transaction\n   * @param index Index of the arg to get\n   */\n  appArgs(index: uint64): bytes\n  /**\n   * Accounts listed in the ApplicationCall transaction\n   * @param index Index of the account to get\n   */\n  accounts(index: uint64): Account\n  /**\n   * Foreign Assets listed in the ApplicationCall transaction\n   * @param index Index of the asset to get\n   */\n  assets(index: uint64): Asset\n  /**\n   * Foreign Apps listed in the ApplicationCall transaction\n   * @param index Index of the application to get\n   */\n  apps(index: uint64): Application\n  /**\n   * The id of the created application\n   */\n  readonly createdApp: Application\n  /**\n   * Number of logs\n   */\n  readonly numLogs: uint64\n}\nexport interface PaymentFields {\n  /**\n   * 32 byte address\n   */\n  sender?: Account | bytes\n  /**\n   * microalgos\n   */\n  fee?: uint64\n  /**\n   * round number\n   */\n  firstValid?: uint64\n  /**\n   * UNIX timestamp of block before txn.FirstValid. Fails if negative\n   */\n  firstValidTime?: uint64\n  /**\n   * round number\n   */\n  lastValid?: uint64\n  /**\n   * Any data up to 1024 bytes\n   */\n  note?: bytes | string\n  /**\n   * 32 byte lease value\n   */\n  lease?: bytes\n  /**\n   * 32 byte Sender's new AuthAddr\n   */\n  rekeyTo?: Account | bytes\n  /**\n   * 32 byte address\n   */\n  receiver?: Account | bytes\n  /**\n   * microalgos\n   */\n  amount?: uint64\n  /**\n   * 32 byte address\n   */\n  closeRemainderTo?: Account | bytes\n}\nexport interface KeyRegistrationFields {\n  /**\n   * 32 byte address\n   */\n  sender?: Account | bytes\n  /**\n   * microalgos\n   */\n  fee?: uint64\n  /**\n   * round number\n   */\n  firstValid?: uint64\n  /**\n   * UNIX timestamp of block before txn.FirstValid. Fails if negative\n   */\n  firstValidTime?: uint64\n  /**\n   * round number\n   */\n  lastValid?: uint64\n  /**\n   * Any data up to 1024 bytes\n   */\n  note?: bytes | string\n  /**\n   * 32 byte lease value\n   */\n  lease?: bytes\n  /**\n   * 32 byte Sender's new AuthAddr\n   */\n  rekeyTo?: Account | bytes\n  /**\n   * 32 byte address\n   */\n  voteKey?: bytes\n  /**\n   * 32 byte address\n   */\n  selectionKey?: bytes\n  /**\n   * The first round that the participation key is valid.\n   */\n  voteFirst?: uint64\n  /**\n   * The last round that the participation key is valid.\n   */\n  voteLast?: uint64\n  /**\n   * Dilution for the 2-level participation key\n   */\n  voteKeyDilution?: uint64\n  /**\n   * Marks an account nonparticipating for rewards\n   */\n  nonparticipation?: boolean\n  /**\n   * 64 byte state proof public key\n   */\n  stateProofKey?: bytes\n}\nexport interface AssetConfigFields {\n  /**\n   * 32 byte address\n   */\n  sender?: Account | bytes\n  /**\n   * microalgos\n   */\n  fee?: uint64\n  /**\n   * round number\n   */\n  firstValid?: uint64\n  /**\n   * UNIX timestamp of block before txn.FirstValid. Fails if negative\n   */\n  firstValidTime?: uint64\n  /**\n   * round number\n   */\n  lastValid?: uint64\n  /**\n   * Any data up to 1024 bytes\n   */\n  note?: bytes | string\n  /**\n   * 32 byte lease value\n   */\n  lease?: bytes\n  /**\n   * 32 byte Sender's new AuthAddr\n   */\n  rekeyTo?: Account | bytes\n  /**\n   * Asset ID in asset config transaction\n   */\n  configAsset?: Asset | uint64\n  /**\n   * Total number of units of this asset created\n   */\n  total?: uint64\n  /**\n   * Number of digits to display after the decimal place when displaying the asset\n   */\n  decimals?: uint64\n  /**\n   * Whether the asset's slots are frozen by default or not, 0 or 1\n   */\n  defaultFrozen?: boolean\n  /**\n   * Unit name of the asset\n   */\n  unitName?: bytes | string\n  /**\n   * The asset name\n   */\n  assetName?: bytes | string\n  /**\n   * URL\n   */\n  url?: bytes | string\n  /**\n   * 32 byte commitment to unspecified asset metadata\n   */\n  metadataHash?: bytes\n  /**\n   * 32 byte address\n   */\n  manager?: Account | bytes\n  /**\n   * 32 byte address\n   */\n  reserve?: Account | bytes\n  /**\n   * 32 byte address\n   */\n  freeze?: Account | bytes\n  /**\n   * 32 byte address\n   */\n  clawback?: Account | bytes\n}\nexport interface AssetTransferFields {\n  /**\n   * 32 byte address\n   */\n  sender?: Account | bytes\n  /**\n   * microalgos\n   */\n  fee?: uint64\n  /**\n   * round number\n   */\n  firstValid?: uint64\n  /**\n   * UNIX timestamp of block before txn.FirstValid. Fails if negative\n   */\n  firstValidTime?: uint64\n  /**\n   * round number\n   */\n  lastValid?: uint64\n  /**\n   * Any data up to 1024 bytes\n   */\n  note?: bytes | string\n  /**\n   * 32 byte lease value\n   */\n  lease?: bytes\n  /**\n   * 32 byte Sender's new AuthAddr\n   */\n  rekeyTo?: Account | bytes\n  /**\n   * Asset ID\n   */\n  xferAsset?: Asset | uint64\n  /**\n   * value in Asset's units\n   */\n  assetAmount?: uint64\n  /**\n   * 32 byte address. Source of assets if Sender is the Asset's Clawback address.\n   */\n  assetSender?: Account | bytes\n  /**\n   * 32 byte address\n   */\n  assetReceiver?: Account | bytes\n  /**\n   * 32 byte address\n   */\n  assetCloseTo?: Account | bytes\n}\nexport interface AssetFreezeFields {\n  /**\n   * 32 byte address\n   */\n  sender?: Account | bytes\n  /**\n   * microalgos\n   */\n  fee?: uint64\n  /**\n   * round number\n   */\n  firstValid?: uint64\n  /**\n   * UNIX timestamp of block before txn.FirstValid. Fails if negative\n   */\n  firstValidTime?: uint64\n  /**\n   * round number\n   */\n  lastValid?: uint64\n  /**\n   * Any data up to 1024 bytes\n   */\n  note?: bytes | string\n  /**\n   * 32 byte lease value\n   */\n  lease?: bytes\n  /**\n   * 32 byte Sender's new AuthAddr\n   */\n  rekeyTo?: Account | bytes\n  /**\n   * Asset ID being frozen or un-frozen\n   */\n  freezeAsset?: Asset | uint64\n  /**\n   * 32 byte address of the account whose asset slot is being frozen or un-frozen\n   */\n  freezeAccount?: Account | bytes\n  /**\n   * The new frozen value\n   */\n  frozen?: boolean\n}\nexport interface ApplicationCallFields {\n  /**\n   * 32 byte address\n   */\n  sender?: Account | bytes\n  /**\n   * microalgos\n   */\n  fee?: uint64\n  /**\n   * round number\n   */\n  firstValid?: uint64\n  /**\n   * UNIX timestamp of block before txn.FirstValid. Fails if negative\n   */\n  firstValidTime?: uint64\n  /**\n   * round number\n   */\n  lastValid?: uint64\n  /**\n   * Any data up to 1024 bytes\n   */\n  note?: bytes | string\n  /**\n   * 32 byte lease value\n   */\n  lease?: bytes\n  /**\n   * 32 byte Sender's new AuthAddr\n   */\n  rekeyTo?: Account | bytes\n  /**\n   * ApplicationID from ApplicationCall transaction\n   */\n  appId?: Application | uint64\n  /**\n   * ApplicationCall transaction on completion action\n   */\n  onCompletion?: OnCompleteAction\n  /**\n   * Number of global state integers this application makes use of.\n   */\n  globalNumUint?: uint64\n  /**\n   * Number of global state byteslices this application makes use of.\n   */\n  globalNumBytes?: uint64\n  /**\n   * Number of local state integers this application makes use of.\n   */\n  localNumUint?: uint64\n  /**\n   * Number of local state byteslices this application makes use of.\n   */\n  localNumBytes?: uint64\n  /**\n   * Number of additional pages for each of the application's approval and clear state program\n   */\n  extraProgramPages?: uint64\n  /**\n   * All approval program pages\n   * @param index Index of the page to get\n   */\n  approvalProgram?: bytes | readonly [...bytes[]]\n  /**\n   * All clear state program pages\n   * @param index Index of the page to get\n   */\n  clearStateProgram?: bytes | readonly [...bytes[]]\n  /**\n   * Arguments passed to the application in the ApplicationCall transaction\n   * @param index Index of the arg to get\n   */\n  appArgs?: readonly [...unknown[]]\n  /**\n   * Accounts listed in the ApplicationCall transaction\n   * @param index Index of the account to get\n   */\n  accounts?: readonly [...(Account | bytes)[]]\n  /**\n   * Foreign Assets listed in the ApplicationCall transaction\n   * @param index Index of the asset to get\n   */\n  assets?: readonly [...(Asset | uint64)[]]\n  /**\n   * Foreign Apps listed in the ApplicationCall transaction\n   * @param index Index of the application to get\n   */\n  apps?: readonly [...(Application | uint64)[]]\n}\n/**\n * A union of all ItxnParams types\n */\nexport type ItxnParams =\n  | PaymentItxnParams\n  | KeyRegistrationItxnParams\n  | AssetConfigItxnParams\n  | AssetTransferItxnParams\n  | AssetFreezeItxnParams\n  | ApplicationCallItxnParams\n/**\n * Conditional type which returns the matching InnerTransaction types for a given tuple of ItxnParams types\n */\nexport type TxnFor<TFields extends [...ItxnParams[]]> = TFields extends [{ submit(): infer TTxn }, ...infer TRest extends [...ItxnParams[]]]\n  ? [TTxn, ...TxnFor<TRest>]\n  : []\n/**\n * Submit a group of ItxnParams objects and return the InnerTransaction results\n */\nexport function submitGroup<TFields extends [...ItxnParams[]]>(...transactionFields: TFields): TxnFor<TFields> {\n  throw new NoImplementation()\n}\n/**\n * Holds Payment fields which can be updated, cloned, or submitted.\n */\nexport abstract class PaymentItxnParams {\n  /**\n   * Submit an itxn with these fields and return the PaymentInnerTxn result\n   */\n  submit(): PaymentInnerTxn {\n    throw new NoImplementation()\n  }\n  /**\n   * Update one or more fields in this PaymentItxnParams object\n   */\n  set(fields: PaymentFields): void {\n    throw new NoImplementation()\n  }\n  /**\n   * Return a copy of this PaymentItxnParams object\n   */\n  copy(): PaymentItxnParams {\n    throw new NoImplementation()\n  }\n}\n/**\n * Create a new PaymentItxnParams object with the specified fields\n */\nexport function payment(fields: PaymentFields): PaymentItxnParams {\n  throw new NoImplementation()\n}\n/**\n * Holds KeyRegistration fields which can be updated, cloned, or submitted.\n */\nexport abstract class KeyRegistrationItxnParams {\n  /**\n   * Submit an itxn with these fields and return the KeyRegistrationInnerTxn result\n   */\n  submit(): KeyRegistrationInnerTxn {\n    throw new NoImplementation()\n  }\n  /**\n   * Update one or more fields in this KeyRegistrationItxnParams object\n   */\n  set(fields: KeyRegistrationFields): void {\n    throw new NoImplementation()\n  }\n  /**\n   * Return a copy of this KeyRegistrationItxnParams object\n   */\n  copy(): KeyRegistrationItxnParams {\n    throw new NoImplementation()\n  }\n}\n/**\n * Create a new KeyRegistrationItxnParams object with the specified fields\n */\nexport function keyRegistration(fields: KeyRegistrationFields): KeyRegistrationItxnParams {\n  throw new NoImplementation()\n}\n/**\n * Holds AssetConfig fields which can be updated, cloned, or submitted.\n */\nexport abstract class AssetConfigItxnParams {\n  /**\n   * Submit an itxn with these fields and return the AssetConfigInnerTxn result\n   */\n  submit(): AssetConfigInnerTxn {\n    throw new NoImplementation()\n  }\n  /**\n   * Update one or more fields in this AssetConfigItxnParams object\n   */\n  set(fields: AssetConfigFields): void {\n    throw new NoImplementation()\n  }\n  /**\n   * Return a copy of this AssetConfigItxnParams object\n   */\n  copy(): AssetConfigItxnParams {\n    throw new NoImplementation()\n  }\n}\n/**\n * Create a new AssetConfigItxnParams object with the specified fields\n */\nexport function assetConfig(fields: AssetConfigFields): AssetConfigItxnParams {\n  throw new NoImplementation()\n}\n/**\n * Holds AssetTransfer fields which can be updated, cloned, or submitted.\n */\nexport abstract class AssetTransferItxnParams {\n  /**\n   * Submit an itxn with these fields and return the AssetTransferInnerTxn result\n   */\n  submit(): AssetTransferInnerTxn {\n    throw new NoImplementation()\n  }\n  /**\n   * Update one or more fields in this AssetTransferItxnParams object\n   */\n  set(fields: AssetTransferFields): void {\n    throw new NoImplementation()\n  }\n  /**\n   * Return a copy of this AssetTransferItxnParams object\n   */\n  copy(): AssetTransferItxnParams {\n    throw new NoImplementation()\n  }\n}\n/**\n * Create a new AssetTransferItxnParams object with the specified fields\n */\nexport function assetTransfer(fields: AssetTransferFields): AssetTransferItxnParams {\n  throw new NoImplementation()\n}\n/**\n * Holds AssetFreeze fields which can be updated, cloned, or submitted.\n */\nexport abstract class AssetFreezeItxnParams {\n  /**\n   * Submit an itxn with these fields and return the AssetFreezeInnerTxn result\n   */\n  submit(): AssetFreezeInnerTxn {\n    throw new NoImplementation()\n  }\n  /**\n   * Update one or more fields in this AssetFreezeItxnParams object\n   */\n  set(fields: AssetFreezeFields): void {\n    throw new NoImplementation()\n  }\n  /**\n   * Return a copy of this AssetFreezeItxnParams object\n   */\n  copy(): AssetFreezeItxnParams {\n    throw new NoImplementation()\n  }\n}\n/**\n * Create a new AssetFreezeItxnParams object with the specified fields\n */\nexport function assetFreeze(fields: AssetFreezeFields): AssetFreezeItxnParams {\n  throw new NoImplementation()\n}\n/**\n * Holds ApplicationCall fields which can be updated, cloned, or submitted.\n */\nexport abstract class ApplicationCallItxnParams {\n  /**\n   * Submit an itxn with these fields and return the ApplicationCallInnerTxn result\n   */\n  submit(): ApplicationCallInnerTxn {\n    throw new NoImplementation()\n  }\n  /**\n   * Update one or more fields in this ApplicationCallItxnParams object\n   */\n  set(fields: ApplicationCallFields): void {\n    throw new NoImplementation()\n  }\n  /**\n   * Return a copy of this ApplicationCallItxnParams object\n   */\n  copy(): ApplicationCallItxnParams {\n    throw new NoImplementation()\n  }\n}\n/**\n * Create a new ApplicationCallItxnParams object with the specified fields\n */\nexport function applicationCall(fields: ApplicationCallFields): ApplicationCallItxnParams {\n  throw new NoImplementation()\n}\n"],"names":[],"mappings":";;AA68BA;;AAEG;AACa,SAAA,WAAW,CAAoC,GAAG,iBAA0B,EAAA;IAC1F,MAAM,IAAI,gBAAgB,EAAE;AAC9B;AACA;;AAEG;MACmB,iBAAiB,CAAA;AACrC;;AAEG;IACH,MAAM,GAAA;QACJ,MAAM,IAAI,gBAAgB,EAAE;;AAE9B;;AAEG;AACH,IAAA,GAAG,CAAC,MAAqB,EAAA;QACvB,MAAM,IAAI,gBAAgB,EAAE;;AAE9B;;AAEG;IACH,IAAI,GAAA;QACF,MAAM,IAAI,gBAAgB,EAAE;;AAE/B;AACD;;AAEG;AACG,SAAU,OAAO,CAAC,MAAqB,EAAA;IAC3C,MAAM,IAAI,gBAAgB,EAAE;AAC9B;AACA;;AAEG;MACmB,yBAAyB,CAAA;AAC7C;;AAEG;IACH,MAAM,GAAA;QACJ,MAAM,IAAI,gBAAgB,EAAE;;AAE9B;;AAEG;AACH,IAAA,GAAG,CAAC,MAA6B,EAAA;QAC/B,MAAM,IAAI,gBAAgB,EAAE;;AAE9B;;AAEG;IACH,IAAI,GAAA;QACF,MAAM,IAAI,gBAAgB,EAAE;;AAE/B;AACD;;AAEG;AACG,SAAU,eAAe,CAAC,MAA6B,EAAA;IAC3D,MAAM,IAAI,gBAAgB,EAAE;AAC9B;AACA;;AAEG;MACmB,qBAAqB,CAAA;AACzC;;AAEG;IACH,MAAM,GAAA;QACJ,MAAM,IAAI,gBAAgB,EAAE;;AAE9B;;AAEG;AACH,IAAA,GAAG,CAAC,MAAyB,EAAA;QAC3B,MAAM,IAAI,gBAAgB,EAAE;;AAE9B;;AAEG;IACH,IAAI,GAAA;QACF,MAAM,IAAI,gBAAgB,EAAE;;AAE/B;AACD;;AAEG;AACG,SAAU,WAAW,CAAC,MAAyB,EAAA;IACnD,MAAM,IAAI,gBAAgB,EAAE;AAC9B;AACA;;AAEG;MACmB,uBAAuB,CAAA;AAC3C;;AAEG;IACH,MAAM,GAAA;QACJ,MAAM,IAAI,gBAAgB,EAAE;;AAE9B;;AAEG;AACH,IAAA,GAAG,CAAC,MAA2B,EAAA;QAC7B,MAAM,IAAI,gBAAgB,EAAE;;AAE9B;;AAEG;IACH,IAAI,GAAA;QACF,MAAM,IAAI,gBAAgB,EAAE;;AAE/B;AACD;;AAEG;AACG,SAAU,aAAa,CAAC,MAA2B,EAAA;IACvD,MAAM,IAAI,gBAAgB,EAAE;AAC9B;AACA;;AAEG;MACmB,qBAAqB,CAAA;AACzC;;AAEG;IACH,MAAM,GAAA;QACJ,MAAM,IAAI,gBAAgB,EAAE;;AAE9B;;AAEG;AACH,IAAA,GAAG,CAAC,MAAyB,EAAA;QAC3B,MAAM,IAAI,gBAAgB,EAAE;;AAE9B;;AAEG;IACH,IAAI,GAAA;QACF,MAAM,IAAI,gBAAgB,EAAE;;AAE/B;AACD;;AAEG;AACG,SAAU,WAAW,CAAC,MAAyB,EAAA;IACnD,MAAM,IAAI,gBAAgB,EAAE;AAC9B;AACA;;AAEG;MACmB,yBAAyB,CAAA;AAC7C;;AAEG;IACH,MAAM,GAAA;QACJ,MAAM,IAAI,gBAAgB,EAAE;;AAE9B;;AAEG;AACH,IAAA,GAAG,CAAC,MAA6B,EAAA;QAC/B,MAAM,IAAI,gBAAgB,EAAE;;AAE9B;;AAEG;IACH,IAAI,GAAA;QACF,MAAM,IAAI,gBAAgB,EAAE;;AAE/B;AACD;;AAEG;AACG,SAAU,eAAe,CAAC,MAA6B,EAAA;IAC3D,MAAM,IAAI,gBAAgB,EAAE;AAC9B;;;;;;;;;;;;;;;;;;;;;"}